<配列>
複数の値をまとめて保存する
配列の基本構文→「$配列名 = array(値１, 値2, ・・・);」
配列のデータには先頭から0, 1, 2, ・・・と順に「インデックス番号」が割り振られていく。
配列のデータを取り出すには$配列名[インデックス番号] とする。

$names = array('John', 'Kate', 'Bob');
echo $names[0]; //結果: John
echo $names[1]; //結果: Kate

配列の末尾に値を追加するときは「$配列名[] = 値;」とする。
$names[] = 'Mary';  // $names = array('John', 'Kate', 'Bob', 'Mary');
echo $names[3];  //結果: Mary

すでに存在するインデックス番号を指定すると、配列の値を上書きすることもできる。
$names[1] = 'Jane';  // $names = array('John', 'Jane', 'Bob', 'Mary');
echo $names[1]; //結果: Jane

------------------------------------------------------------------------------------
<連想配列>
配列と同じく複数のデータをまとめて管理するのに用いる。
配列との違いは、個々の要素を管理するのにインデックス番号ではなく、「キー」を指定する点。
（インデックス番号ではecho出来ない。）
「$配列名 = array('キー名' => '値１', ・・・);」
「=>」を用いてキーと値をセットする。

$user = array(
    'name' => 'わんこ',
    'age' => 14
    );
print_r($user); //結果: Array ( [name] => わんこ [age] => 14 )

-値の取り出し方-
echo $user[name]; //結果:わんこ
echo $user[age];  //結果：14

-値の追加の仕方-
$user['level'] = 'beginner';
    [追加するキー] = 追加する値
print_r($user) //結果: Array ( [name] => わんこ [age] => 14 [level] => beginner )
    